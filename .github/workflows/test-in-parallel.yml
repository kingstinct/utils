# This is a basic workflow to help you get started with Actions

name: Test in Parallel

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      parellelism_count:
        description: The number of test pipelines to run in parallel
        required: false
        type: string
        default: "4"
      test_command:
        required: false
        type: string
        default: npx jest
        description: The command to run in each test pipeline
      package_manager:
        required: false
        type: string
        default: pnpm
        description: The package manager to use
      pnpm_version:
        required: false
        type: string
        default: "7"
        description: If using pnpm - which version to use
  workflow_call:
    inputs:
      parellelism_count:
        required: false
        type: number
        default: 4
      test_command:
        required: false
        type: string
        default: npx jest
      package_manager:
        required: false
        type: string
        default: pnpm
      pnpm_version:
        required: false
        type: string
        default: "7"
        description: If using pnpm - which version to use

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 2

    outputs:
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}

    steps:
      - uses: actions/checkout@v2

      - uses: pnpm/action-setup@v2.2.2
        if: ${{ inputs.package_manager == 'pnpm' }}
        with:
          version: ${{ inputs.pnpm_version }}

      - uses: actions/setup-node@v2
        if: ${{ env.ACT }}
        with:
          node-version-file: .nvmrc

      - uses: actions/setup-node@v2
        if: ${{ !env.ACT }}
        with:
          node-version-file: .nvmrc
          cache: ${{ inputs.package_manager }}

      - run: ${{ inputs.package_manager }} install

      - id: set-test-chunks
        name: Set Chunks
        run: echo "::set-output name=test-chunks::$(npx jest --listTests --json | jq -cM '[_nwise(length / ${{ inputs.parellelism_count }} | ceil)]')"

      - id: set-test-chunk-ids
        name: Set Chunk IDs
        run: echo "::set-output name=test-chunk-ids::$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')"
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: test (chunk ${{ matrix.chunk }})
    needs: setup
    strategy:
      matrix:
        chunk: ${{ fromJson(needs.setup.outputs['test-chunk-ids']) }}

    steps:
      - uses: actions/checkout@v2

      - uses: pnpm/action-setup@v2.2.2
        if: ${{ inputs.package_manager == 'pnpm' }}
        with:
          version: ${{ inputs.pnpm_version }}

      - name: Setup Node
        uses: actions/setup-node@v2
        if: ${{ env.ACT }}
        with:
          node-version-file: .nvmrc

      - name: Setup Node and Cache
        uses: actions/setup-node@v2
        if: ${{ !env.ACT }}
        with:
          node-version-file: .nvmrc
          cache: ${{ inputs.package_manager }}

      - name: Install
        run: ${{ inputs.package_manager }} install

      - name: Test
        run: echo $CHUNKS | jq '.[${{ matrix.chunk }}] | .[] | @text' | xargs ${{ inputs.test_command }}
        env:
          CHUNKS: ${{ needs.setup.outputs['test-chunks'] }}
          NODE_OPTIONS: --max-old-space-size=4096
