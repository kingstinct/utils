# This is a basic workflow to help you get started with Actions

name: Publish Expo Deploy Preview

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  workflow_call:
    inputs:
      working_directory:
        type: string
        default: .
        description: The working directory to run the workflow in.
        required: false
      expo_release_channel:
        type: string
        description: Your choice - typically something like "pr-9", should be a valid expo release channel name. Will be available as CUSTOM_NAME in app.config.js
        required: true
      expo_organisation_or_user_slug:
        type: string
        description: The organisation/user slug you're publishing to
        required: false
        default: kingstinct
      expo_app_slug:
        type: string
        description: The app slug you're publishing to, should point to an Expo Development Client
        required: true
      env_inline:
        type: string
        description: Pass any environment variables to the publish command here, for passing to app.config.js. Could be "APP_ENV=staging MY_OTHER_VAR=hey" for example
        required: false
      package_manager:
        required: false
        type: string
        default: yarn
        description: The package manager to use
      pnpm_version:
        required: false
        type: string
        default: "8"
        description: If using pnpm - which version to use
    secrets:
      EXPO_TOKEN:
        required: true
        description: The Expo token to use for publishing
      SENTRY_AUTH_TOKEN:
        required: false
        description: The Sentry auth token to use for publishing

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  expo-publish-preview:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        if: ${{ inputs.package_manager == 'pnpm' }}
        with:
          version: ${{ inputs.pnpm_version }}

      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: ${{ inputs.package_manager }}

      - name: Install dependencies (bun)
        run: ${{ inputs.package_manager }} install --frozen-lockfile --concurrent-scripts 1
        if: ${{ inputs.package_manager == 'bun' }}
        working-directory: ${{ inputs.working_directory }}

      - name: Install dependencies (npm)
        run: npm ci
        if: ${{ inputs.package_manager == 'npm' }}
        working-directory: ${{ inputs.working_directory }}

      - name: Install dependencies (others)
        run: ${{ inputs.package_manager }} install --frozen-lockfile
        if: ${{ inputs.package_manager != 'npm' && inputs.package_manager != 'bun' }}
        working-directory: ${{ inputs.working_directory }}

      - name: Expo GitHub Action
        uses: expo/expo-github-action@v8
        with:
          # Your Expo username, for authentication.
          token: ${{ secrets.EXPO_TOKEN }}
          expo-version: latest
          eas-version: latest
          # If Expo should be stored in the GitHub Actions cache (can be true or false)
          expo-cache: true # optional

      - name: Find Metro cache
        id: metro-cache-dir-path
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            const os = require('os');
            const path = require('path');
            return path.join(os.tmpdir(), 'metro-cache');

      - name: Restore Metro cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.metro-cache-dir-path.outputs.result }}
          key: ${{ runner.os }}-metro-cache-${{ matrix.app }}-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-metro-cache-${{ matrix.app }}-${{ github.base_ref }}
            ${{ runner.os }}-metro-cache-${{ matrix.app }}-

      # Runs a set of commands using the runners shell
      - name: Publish
        run: ${{ inputs.env_inline }} expo publish --release-channel=${{ inputs.expo_release_channel }}
        working-directory: ${{ inputs.working_directory }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DEPLOY_ENV: ${{ inputs.expo_release_channel }}

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          message: |
            Expo preview is ready for review, [it's available here](https://expo.dev/@${{ inputs.expo_organisation_or_user_slug }}/${{ inputs.expo_app_slug }}?serviceType=classic&distribution=expo-dev-client&releaseChannel=${{ inputs.expo_release_channel }}&scheme=exp%2B${{ inputs.expo_app_slug }})

            Or just scan this QR code:
            ![QR Preview](https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=exp%2B${{ inputs.expo_app_slug }}%3A%2F%2Fexpo-development-client%2F%3Furl%3Dhttps%3A%2F%2Fexp.host%2F%40${{ inputs.expo_organisation_or_user_slug }}%2F${{ inputs.expo_app_slug }}%3Frelease-channel%3D${{ inputs.expo_release_channel }})
