# This is a basic workflow to help you get started with Actions

name: EAS Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_call:
    inputs:
      working_directory:
        type: string
        default: .
        description: The working directory to run the workflow in.
        required: false
      env_inline:
        type: string
        description: Pass any environment variables to the publish command here, for passing to app.config.js. Could be "APP_ENV=staging MY_OTHER_VAR=hey" for example
        required: false
      platform:
        type: string
        description: ios or android
        required: true
      expo_organisation_or_user_slug:
        type: string
        description: The organisation/user slug you're publishing to
        required: false
        default: kingstinct
      build_profile:
        type: string
        description: The build profile to use, staging or production for example
        required: true
      always_run:
        type: boolean
        description: Run even if there's a build with the same hash (finished or in progress)
        required: false
        default: false
      package_manager:
        required: false
        type: string
        default: yarn
        description: The package manager to use
      autosubmit:
        required: false
        type: boolean
        default: false
        description: Autosubmit to AppStore/PlayStore
      checkout_ref:
        required: false
        type: string
        description: The ref to checkout
      pnpm_version:
        required: false
        type: string
        default: "7"
        description: If using pnpm - which version to use
    secrets:
      EXPO_TOKEN:
        description: The Expo token to use for publishing
        required: true
      EXPO_APPLE_APP_SPECIFIC_PASSWORD:
        description: The Apple App Specific Password to use for publishing to AppStore (required for autosubmit)
        required: false
      GOOGLE_SERVICES_JSON:
        description: The Google Services JSON to use for publishing to PlayStore (required for autosubmit)
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  eas-build:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      EXPO_DEBUG: 1
      DEBUG: 1
      EAS_BUILD_AUTOCOMMIT: ${{ inputs.autosubmit }}
      EXPO_APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.EXPO_APPLE_APP_SPECIFIC_PASSWORD }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        if: ${{ !inputs.checkout_ref }}

      - uses: actions/checkout@v3
        if: ${{ inputs.checkout_ref }}
        with:
          ref: ${{ inputs.checkout_ref }}

      - uses: pnpm/action-setup@v2.2.2
        if: ${{ inputs.package_manager == 'pnpm' }}
        with:
          version: ${{ inputs.pnpm_version }}

      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: ${{ inputs.package_manager }}

      - name: Install dependencies
        run: ${{ inputs.package_manager }} install
        working-directory: ${{ inputs.working_directory }}

      - name: Expo GitHub Action
        uses: expo/expo-github-action@v7
        id: expo-init
        with:
          # Your Expo username, for authentication.
          token: ${{ secrets.EXPO_TOKEN }}
          # If Expo should be stored in the GitHub Actions cache (can be true or false)
          expo-version: latest
          eas-version: latest
          expo-cache: true # optional

      - name: Get Hash
        if: ${{ !inputs.always_run }}
        run: echo "HASH=`npx expo-native-dependency-hash hash`" >> $GITHUB_ENV

      - name: Matching Native Builds
        if: ${{ !inputs.always_run }}
        run: echo "MATCHING_FINISHED_BUILDS=`${{ inputs.env_inline }} npx eas-cli@latest build:list --buildProfile=${{ inputs.build_profile }} --platform=${{ inputs.platform }} --status=finished | grep -c $HASH`" >> $GITHUB_ENV

      - name: Matching In-Progress Builds
        if: ${{ !inputs.always_run }}
        run: echo "MATCHING_IN_PROGRESS_BUILDS=`${{ inputs.env_inline }} npx eas-cli@latest build:list --buildProfile=${{ inputs.build_profile }} --platform=${{ inputs.platform }} --status=in-progress | grep -c $HASH`" >> $GITHUB_ENV

      - name: Matching In-Queue Builds
        if: ${{ !inputs.always_run }}
        run: echo "MATCHING_IN_QUEUE_BUILDS=`${{ inputs.env_inline }} npx eas-cli@latest build:list --buildProfile=${{ inputs.build_profile }} --platform=${{ inputs.platform }} --status=in-queue | grep -c $HASH`" >> $GITHUB_ENV

      - name: Matching New Builds
        if: ${{ !inputs.always_run }}
        run: echo "MATCHING_NEW_BUILDS=`${{ inputs.env_inline }} npx eas-cli@latest build:list --buildProfile=${{ inputs.build_profile }} --platform=${{ inputs.platform }} --status=new | grep -c $HASH`" >> $GITHUB_ENV

      - name: create google-services.json
        id: init-google-services-json
        if: ${{ inputs.platform == 'android' && inputs.autosubmit }}
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > ./google-services.json

      - name: EAS Build
        if: ${{ inputs.autosubmit && (inputs.always_run || (env.MATCHING_IN_PROGRESS_BUILDS == 0 && env.MATCHING_FINISHED_BUILDS == 0 && env.MATCHING_IN_QUEUE_BUILDS == 0 && env.MATCHING_NEW_BUILDS == 0)) }}
        run: |
          BUILD_ID=`set -e; npx eas-cli@latest build --no-wait --non-interactive --profile=${{ inputs.build_profile }} --auto-submit --platform ${{ inputs.platform }} --json | jq ".[].id"`
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
        working-directory: ${{ inputs.working_directory }}

      - name: EAS Build
        if: ${{ !inputs.autosubmit && (inputs.always_run || (env.MATCHING_IN_PROGRESS_BUILDS == 0 && env.MATCHING_FINISHED_BUILDS == 0 && env.MATCHING_IN_QUEUE_BUILDS == 0 && env.MATCHING_NEW_BUILDS == 0)) }}
        run: |
          BUILD_ID=`set -e; npx eas-cli@latest build --no-wait --non-interactive --profile=${{ inputs.build_profile }} --platform ${{ inputs.platform }} --json | jq ".[].id"`
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
        working-directory: ${{ inputs.working_directory }}

      - run: echo "::set-output name=BUILD_URL::https://expo.dev/accounts/${{ inputs.expo_organisation_or_user_slug }}/builds/${{ env.BUILD_ID }}"
        id: build-url
        if: ${{ env.BUILD_ID }}
